The ``add_integer`` module
======================

Using ``add_integer``
-------------------

First import
``add_integer`` from the ``add_integer`` module:

>>> add_integer = __import__('0-add_integer').add_integer

Now use it:

>>> add_integer(1, 2)
3

>>> add_integer(100, -2)
98

>>> add_integer(2)
100

>>> add_integer(100.3, -2)
98

>>> add_integer(4, "School")
Traceback (most recent call last):
  File "/home/vagrant/holbertonschool-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 15, in add_integer
    b = int(b)
ValueError: invalid literal for int() with base 10: 'School'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/vagrant/holbertonschool-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 21, in add_integer
    raise TypeError('b must be an integer')
TypeError: b must be an integer

>>> add_integer(None)
Traceback (most recent call last):
  File "/home/vagrant/holbertonschool-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 14, in add_integer
    a = int(a)
TypeError: int() argument must be a string, a bytes-like object or a number, not 'NoneType'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/vagrant/holbertonschool-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 19, in add_integer
    raise TypeError('a must be an integer')
TypeError: a must be an integer
